import telebot
from telebot import types
from config import TOKEN
from db import clear_table, load_data, save_data_to_db
from data_fetch import fetch_historical_data, interval_to_milliseconds
from preprocess import preprocess_data, create_binary_target, remove_correlated_features
from plotting import send_plot, plot_correlation_matrix_matplotlib, plot_price, plot_factors, plot_predictions, plot_capital_curve
from models import (normalize_data, do_smote, feature_selection_rfe, train_basic_models, 
                    grid_search_random_forest, train_voting_ensemble)
import asyncio
import websockets
import json
import io
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime, timedelta

bot = telebot.TeleBot(TOKEN)

df = None
scaler = None
chosen_factors = []
features_all = []
selected_features_for_model = []
models = {}
model_scores = {}
target_column = 'close'
parsing_state = {}
socket_tasks = {}
shift_n_value = 1
nan_fill_method = None

def show_instructions(chat_id):
    instruction_text = ("–®–∞–≥ 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö\n"
                        " - –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit ...\n"
                        "–®–∞–≥ 2: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                        " - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp...\n"
                        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...
                        )
    bot.send_message(chat_id, f"<pre>{instruction_text}</pre>", parse_mode='HTML')

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    instructions_button = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìö')
    btn_reset        = types.KeyboardButton('–û–±–Ω—É–ª–∏—Ç—å –º–æ–¥–µ–ª—å ‚ùå')
    btn_parse        = types.KeyboardButton('–°–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üîé')
    btn_load         = types.KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üìÇ')
    # ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(instructions_button, btn_reset, btn_parse, btn_load)
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_command(message):
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda msg: True)
def handle_text(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    chat_id = message.chat.id
    text = message.text.strip()
    # –ü—Ä–∏–º–µ—Ä:
    if text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìö':
        show_instructions(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –º–µ–Ω—é.")

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline callback'–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback'–æ–≤
    chat_id = call.message.chat.id
    data = call.data
    # –õ–æ–≥–∏–∫–∞ callback'–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ —Ç.–¥.)
    bot.send_message(chat_id, f"–í—ã –Ω–∞–∂–∞–ª–∏: {data}")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

def start_bot():
    bot.polling(none_stop=True)
